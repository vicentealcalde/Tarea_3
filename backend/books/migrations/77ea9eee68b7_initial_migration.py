"""initial migration

Revision ID: 77ea9eee68b7
Revises: 
Create Date: 2023-08-22 16:46:42.384544

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import csv
from sqlalchemy.orm import sessionmaker
from backend.books.models import Author, Book, Rating  # Ajusta la importación según la ubicación real de tus modelos
from pathlib import Path
from backend.db import db 


# revision identifiers, used by Alembic.
revision: str = '77ea9eee68b7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = ('default',)
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('author',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('openlibrary_key', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('book',
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('openlibrary_key', sa.String(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['author.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rating',
    sa.Column('book_id', sa.Integer(), nullable=True),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    Session = sessionmaker(bind=db.engine)
    session = Session()
    # ### end Alembic commands ###
    authors_csv_path = "database_files/authors.csv"
    books_csv_path = "database_files/books.csv"
    ratings_csv_path = "database_files/ratings.csv"

     # Load data from CSV files
    with open(authors_csv_path, "r", encoding="utf-8") as authors_file:
        csv_reader = csv.DictReader(authors_file, delimiter=";")
        for row in csv_reader:
            author = Author(name=row["name"], openlibrary_key=row["key"])
            session.add(author)
    session.commit()

    with open(books_csv_path, "r", encoding="utf-8") as books_file:
        csv_reader = csv.DictReader(books_file, delimiter=";")
        for row in csv_reader:
            author = session.query(Author).filter_by(openlibrary_key=row["author"]).first()
            book = Book(
                title=row["title"],
                openlibrary_key=row["key"],
                author=author,
                description=row["description"]
            )
            session.add(book)
    session.commit()

    with open(ratings_csv_path, "r", encoding="utf-8") as ratings_file:
        csv_reader = csv.DictReader(ratings_file, delimiter=";")
        for row in csv_reader:
            book = session.query(Book).filter_by(openlibrary_key=row["work"]).first()
            rating = Rating(book=book, score=row["score"])
            session.add(rating)
    session.commit()



def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rating')
    op.drop_table('book')
    op.drop_table('author')
    # ### end Alembic commands ###
